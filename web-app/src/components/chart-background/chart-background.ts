import { Chart } from 'chart.js';

export class ChartBackground {

  constructor() {
    window.addEventListener("load", this.buildChart);
  }

  buildChart() {
    let ctx = (document.getElementById("bg-chart") as HTMLCanvasElement).getContext("2d");
    
    // Random stock data for background
    let aapl = [185.91, 184.16, 184.43, 182.17, 184.92, 185.46, 186.5, 185.69, 188.74, 188.84, 190.8, 190.7, 192.28, 191.23, 191.7, 193.46, 193.98, 193.31, 191.83, 190.24, 186.87, 187.5, 187.9, 188.58, 188.15, 188.36, 187.16, 187.63, 186.31, 186.99, 188.18, 186.44, 188.15, 188.59, 190.04, 187.36, 186.05, 185.16, 183.83, 176.89, 176.57, 169.1, 165.26, 162.32, 164.22, 163.65, 162.94, 165.24, 165.72, 172.8, 177.84, 178.24, 175.82, 174.73, 174.14, 172.44, 173.25, 170.05, 168.38, 172.8, 171.61, 168.39, 166.68, 167.78, 166.48, 168.34];
    // Normalize by average value
    aapl = aapl.map((value) => value / (aapl.reduce((a, b) => a + b) / aapl.length)).reverse();

    let tsla = [346.56, 349.93, 344.5, 342.0, 333.01, 333.63, 347.51, 362.22, 352.55, 370.83, 358.17, 357.72, 344.78, 342.77, 332.1, 317.66, 316.09, 319.5, 291.13, 296.74, 291.82, 284.73, 291.72, 283.76, 278.85, 277.85, 279.07, 275.01, 284.49, 276.82, 284.54, 286.48, 284.18, 291.97, 301.06, 305.02, 306.85, 301.97, 302.77, 294.09, 284.45, 301.15, 299.92, 293.9, 294.075, 285.48, 280.69, 283.46, 283.37, 290.24, 300.08, 293.35, 287.69, 291.21, 300.34, 294.08, 300.93, 304.7, 289.66, 299.3, 305.72, 286.94, 267.53, 252.48, 266.13, 257.78];
    // Normalize by average value
    tsla = tsla.map((value) => value / (tsla.reduce((a, b) => a + b) / tsla.length)).reverse();

    let nvda = [240.015, 240.86, 235.72, 241.99, 239.12, 250.95, 257.11, 262.31, 260.17, 265.09, 265.26, 266.91, 262.4, 262.58, 260.62, 262.28, 262.9, 265.15, 265.07, 264.85, 257.62, 252.19, 252.99, 248.59, 249.28, 247.69, 247.54, 242.7, 244.24, 245.94, 247.71, 246.01, 245.56, 255.36, 254.53, 260.13, 255.78, 250.4, 248.68, 239.06, 232.99, 226.31, 227.14, 224.9, 226.33, 225.22, 216.66, 221.2, 223.88, 228.71, 229.04, 236.37, 237.54, 231.49, 231.5, 234.6, 226.24, 227.91, 215.41, 214.25, 221.38, 226.24, 225.35, 221.05, 231.59, 221.35];
    nvda = nvda.map((value) => value / (nvda.reduce((a, b) => a + b) / nvda.length)).reverse();

    let k = [69.39, 69.67, 69.18, 68.7, 69.05, 67.4, 66.84, 66.69, 66.59, 66.26, 67.06, 66.6, 65.77, 65.71, 65.45, 63.71, 62.26, 62.91, 63.27, 64.62, 63.83, 64.39, 65.97, 64.58, 65.23, 63.51, 62.23, 61.52, 60.77, 60.19, 61.18, 61.49, 61.25, 61.65, 61.39, 61.04, 60.33, 60.3, 60.49, 59.8, 58.15, 56.65, 58.75, 58.9, 60.24, 60.1, 60.95, 60.46, 60.52, 60.27, 62.2, 63.41, 63.79, 63.83, 63.06, 62.61, 63.35, 63.62, 64.48, 64.24, 64.56, 64.93, 63.37, 63.12, 65.01, 63.9];
    k = k.map((value) => value / (k.reduce((a, b) => a + b) / k.length));

    let f = [11.25, 11.28, 11.42, 11.52, 11.5, 11.65, 11.71, 11.87, 11.89, 11.99, 11.88, 11.89, 12.02, 12.11, 12.03, 12.1, 12.03, 11.97, 11.83, 11.74, 11.71, 11.55, 11.55, 11.44, 11.51, 11.62, 11.44, 11.52, 11.51, 11.33, 11.46, 11.4, 11.22, 11.18, 11.19, 11.21, 11.06, 11.27, 11.34, 11.36, 11.2, 11.21, 11.26, 11.24, 11.49, 11.43, 11.11, 10.96, 11.04, 10.82, 10.96, 11.33, 11.38, 11.38, 11.28, 11.31, 11.43, 11.45, 11.25, 11.18, 11.35, 11.33, 11.15, 10.86, 11.08, 10.86];
    f = f.map((value) => value / (f.reduce((a, b) => a + b) / f.length));

    let amzn = [1716.5067, 1701.45, 1660.51, 1691.09, 1663.15, 1715.67, 1730.22, 1750.08, 1734.78, 1723.79, 1715.97, 1723.86, 1704.86, 1698.75, 1689.12, 1683.99, 1689.3, 1695.75, 1696.35, 1665.27, 1641.54, 1629.62, 1624.89, 1612.87, 1610.15, 1603.07, 1601.86, 1581.4, 1585.46, 1574.37, 1581.76, 1587.28, 1576.12, 1601.54, 1602.91, 1609.08, 1608.0, 1592.39, 1600.14, 1580.95, 1572.075, 1569.68, 1582.26, 1566.13, 1572.62, 1517.96, 1460.17, 1460.09, 1517.86, 1527.49, 1556.91, 1527.84, 1503.83, 1441.5, 1430.79, 1448.5, 1427.05, 1436.22, 1406.08, 1405.23, 1451.75, 1410.57, 1392.05, 1371.99, 1447.34, 1431.42]
    amzn = amzn.map((value) => value / (amzn.reduce((a, b) => a + b) / amzn.length));

    // Set data
    let data = {
      labels: aapl.map((_, index) => String(index)),
      datasets: [
        {
          data: aapl,
          fill: false,
          borderColor: "rgb(68, 108, 179)",
          pointRadius: 0,
          pointHitRadius: 0,
          pointHoverRadius: 0
        },
        {
          data: tsla,
          fill: false,
          borderColor: "rgb(3, 166, 120)",
          pointRadius: 0,
          pointHitRadius: 0,
          pointHoverRadius: 0
        },
        {
          data: nvda,
          fill: false,
          borderColor: "rgb(102, 51, 153)",
          pointRadius: 0,
          pointHitRadius: 0,
          pointHoverRadius: 0
        },
        {
          data: k,
          fill: false,
          borderColor: "rgb(101, 198, 187)",
          pointRadius: 0,
          pointHitRadius: 0,
          pointHoverRadius: 0
        },
        {
          data: f,
          fill: false,
          borderColor: "rgb(38, 166, 91)",
          pointRadius: 0,
          pointHitRadius: 0,
          pointHoverRadius: 0
        },
        {
          data: amzn,
          fill: false,
          borderColor: "rgb(200, 247, 197)",
          pointRadius: 0,
          pointHitRadius: 0,
          pointHoverRadius: 0
        }
      ]
    }

    // Set options
    let options = {
      events: [],
      elements: {
        line: {
          tension: 0
        }
      },
      animation: {
        duration: 0
      },
      responsiveAnimationDuration: 0,
      scales: {
        scales: {
          display: false
        },
        xAxes: [{
          display: false
        }],
        yAxes: [{
          display: false
        }]
      }
    }

    new Chart(ctx, {
      type: "line",
      data: data,
      options: options
    });
  }
}
